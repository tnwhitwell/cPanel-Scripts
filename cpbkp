#!/bin/bash
config_file_path=/etc/cpbkp-memset.cfg

# usage function
function usage {
  local problem=$1
  local me=$(basename "$0")
  echo "$problem" >&2
  echo
  echo "Usage: $me backuptype [dry]"
  echo
  echo "  $me daily"
  echo
  echo "Run daily backup"
  echo
  echo "backuptype: daily, weekly, monthly"
  echo "add dry to dry run without making changes"
  exit 1
}

# would function for dry-runs
function would {
  cmd="$1"
  if [ "$dry" = true ]; then
    echo "Would $cmd"
  else
    $cmd
  fi
}

echo "Reading config from $config_file_path"
if [ -e "$config_file_path" ]; then # check config file exists
  source $config_file_path
else
  echo "Config file missing. Creating blank file at $config_file_path" >&2
  out_file="# Users to be backed up daily (seperated by spaces, surrounded by quotes)
# eg: daily_users=\"tom jeff joe\"
daily_users=\" \"

# Users to be backed up weekly (seperated by spaces, surrounded by quotes)
# eg: daily_users=\"tom jeff joe\"
weekly_users=\" \"

# retention time for backups (self-explanatory)
daily_retention=1
weekly_retention=1
monthly_retention=1"
  echo "$out_file" > $config_file_path
  exit 1
fi


if [ ! -z ${daily_users+x} ]; then
  daily_users=($daily_users) # create array from config file
else
  daily_users=()
fi

if [ ! -z ${weekly_users+x} ]; then
  weekly_users=($daily_users) # create array from config file
else
  weekly_users=()
fi

all_users=( "${daily_users[@]} ${weekly_users[@]}") # merge arrays for seeing which users are not set (ie. default to monthly)

# sanity check users
for user in ${all_users[@]}; do
  if [ ! -e "/var/cpanel/users/$user" ]; then
    usage "$user is not a valid user. Please check for mistypes :)"
  fi
done

monthly_users=($(cd /var/cpanel/users/ && ls -d *)) # init monthly_users to current cpanel users (to have set users removed)
for tUser in ${all_users[@]}; do
  monthly_users=(${monthly_users[@]//*$tUser*}) # remove set user from list!
done

#check if any arguments are set
if [ $# -lt 1 ]; then
  usage "Not enough arguments."
fi

#get backup type from 1st argument
backup_type=$1
shift

# sanity check backup type
if ! [[ "$backup_type" =~ daily|weekly|monthly ]]; then
  usage "Backup type must be daily / weekly / monthly"
fi

# check if dry-run was requested
dry=false
if [ ! -z ${1+x} ]; then
  if [ "$1" == "dry" ]; then
    dry=true
    shift
  else
    usage "dry must be \"dry\" or unset"
  fi
fi

# set useful variables
DATE=$(date --u +%Y-%m-%d) # set the date :)
backup_folder="/backup/$backup_type" # folder backup will be put in
backup_subfolder="/backup/$backup_type/$DATE" # subfolder with date

cmd= # clear cmd variable

# make backup type folder
if [ ! -d "$backup_folder" ]; then
  would "mkdir $backup_folder"
fi

# make backup type subfolder
if [ ! -d "$backup_subfolder" ]; then
  would "mkdir $backup_subfolder"
fi

backup_users=() # init blank array for users of this backup

# nicely set users to their backup type
case $backup_type in
  daily ) backup_users=(${daily_users[@]})
          retention_time=$daily_retention
    ;;
  weekly ) backup_users=(${weekly_users[@]})
           retention_time=$weekly_retention
    ;;
  monthly ) backup_users=(${monthly_users[@]})
            retention_time=$monthly_retention
    ;;
esac

# run through all specified users
for user in ${backup_users[@]}; do
  cmd="find "$backup_folder" -maxdepth 1 -mindepth 1 -type d | head -n -$retention_time | xargs rm -rfv 2>/dev/null"
  if [ "$dry" = true ]; then
    echo "Would $cmd"
  else
    find "$backup_folder" -maxdepth 1 -mindepth 1 -type d | head -n -$retention_time | xargs rm -rfv 2>/dev/null # remove backups older than specified retention time
  fi

  would "/scripts/pkgacct --backup $user $backup_subfolder" # actually do backup!

done
