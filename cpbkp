#!/bin/bash
config_file_path=./cpbkp.conf

function usage {
  local problem=$1
  local me=$(basename "$0")
  echo "$problem" >&2
  echo
  echo "Usage: $me backuptype [dry]"
  echo
  echo "  $me daily"
  echo
  echo "Run daily backup"
  echo
  echo "backuptype: daily, weekly, monthly"
  echo "add dry to dry run without making changes"
  exit 1
}
function would {
  cmd="$1"
  if [ "$dry" = true ]; then
    echo "Would $cmd"
  else
    $cmd
  fi
}
echo "Reading config from $config_file_path"
if [ -e "$config_file_path" ]; then
  source $config_file_path
else echo "Config file missing"
fi

daily_users=($daily_users)
weekly_users=($weekly_users)
all_users=( "${daily_users[@]} ${weekly_users[@]}")
other_users=()
for user in ${all_users[@]}; do
  if [ ! -e "/var/cpanel/users/$user" ]; then
    usage "$user is not a valid user. Please check for mistypes :)"
  fi
done
monthly_users=($(cd /var/cpanel/users/ && ls -d *))
for tUser in ${all_users[@]}; do
  monthly_users=(${monthly_users[@]//*$tUser*})
done

if [ $# -lt 1 ]; then
  usage "Not enough arguments."
fi

backup_type=$1
shift

if ! [[ "$backup_type" =~ daily|weekly|monthly ]]; then
  usage "Backup type must be daily / weekly / monthly"
fi

dry=false
if [ ! -z ${1+x} ]; then
  if [ "$1" == "dry" ]; then
    dry=true
    shift
  else
    usage "dry must be \"dry\" or unset"
  fi
fi
DATE=$(date --u +%Y-%m-%d) # set the date :)
backup_folder="/backup/$backup_type"
backup_subfolder="/backup/$backup_type/$DATE"

cmd=

if [ ! -d "$backup_folder" ]; then
  cmd="mkdir $backup_folder"
  if [ "$dry" = true ]; then
    echo "Would $cmd"
  else
    $cmd
  fi
fi



if [ ! -d "$backup_subfolder" ]; then
  cmd="mkdir $backup_subfolder"
  if [ "$dry" = true ]; then
    echo "Would $cmd"
  else
    $cmd
  fi
fi

backup_users=()
case $backup_type in
  daily ) backup_users=(${daily_users[@]})
    ;;
  weekly ) backup_users=(${weekly_users[@]})
    ;;
  monthly ) backup_users=(${monthly_users[@]})
    ;;
esac

for user in ${backup_users[@]}; do
  echo $user
done

for user in ${backup_users[@]}; do
  would "find /backup/$backup_type -maxdepth 1 -mindepth 1 -type d | head -n -$retention_time | xargs rm -rfv 2>/dev/null"
  # if [ "$dry" = true ]; then
  #   echo "Would $cmd"
  # else
  #   $cmd
  # fi

  cmd="/scripts/pkgacct --backup $user /backup/$ret_thing/$DATE"
  if [ "$dry" = true ]; then
    echo "Would $cmd"
  else
    $cmd
  fi
  echo
done
